{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Perceptron:\n",
    "    def __init__(self, eta=0.01, n_iter=10): # eta : learning rate\n",
    "        self.eta    = eta\n",
    "        self.n_iter = n_iter\n",
    "    \n",
    "    def fit(self, X, y): # X: data matrix, y: target values\n",
    "        n_rows, n_factors = X.shape\n",
    "        self.weights = np.zeros(n_factors + 1)\n",
    "        self.errors = [] # keep track of error count per iter\n",
    "        \n",
    "        for i in range(self.n_iter):\n",
    "            error_count = 0 \n",
    "            for row, target in zip(X, y): # zip matches each row with the target_value\n",
    "                update = self.eta * (target - self.predict(row)) # when the prediction and target match, the elem in update is 0; otherwise update causes the weights to move in the opposite direction of the prediction                \n",
    "                self.weights += update * np.insert(row, 0, 1) # add 1 to the front of row, so that the constant also gets updated # syntax: np.insert(array, index, same_type_values_to_be_inserted) => vector (matrix will be flattened)\n",
    "                error_count += int(update != 0) # increment error count if prediction is wrong\n",
    "            self.errors.append(error_count)\n",
    "        return self\n",
    "    \n",
    "    # return 1 or -1\n",
    "    def predict(self, row):\n",
    "        return np.where(self.net_input(row) >= 0, 1, -1) # syntax: np.where(cond, value_when_true, value_when_false) => array; if net > 0, assign positive class\n",
    "    \n",
    "    # returns a float value\n",
    "    def net_input(self, row):\n",
    "        return np.dot(row, self.weights[1:]) + self.weights[0] # dot product plus constant\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_length  sepal_width  petal_length  petal_width           class\n",
       "145           6.7          3.0           5.2          2.3  Iris-virginica\n",
       "146           6.3          2.5           5.0          1.9  Iris-virginica\n",
       "147           6.5          3.0           5.2          2.0  Iris-virginica\n",
       "148           6.2          3.4           5.4          2.3  Iris-virginica\n",
       "149           5.9          3.0           5.1          1.8  Iris-virginica"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)\n",
    "df.columns = ['sepal_length','sepal_width', 'petal_length','petal_width', 'class'] # or set names = ['a','b','c','d','e'] when creating df\n",
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1a1a94ea20>"
      ]
     },
     "execution_count": 387,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_data = df.iloc[0:100] # syntax: iloc for accessing by index, loc by accessing by values - which can be set by pd.set_index, pd.set_headers\n",
    "X = test_data.iloc[:,[0,2]].values # values return array instead of dataframe\n",
    "y = np.where(df.iloc[:, 4] == 'Iris-setosa', -1, 1) \n",
    "# plt.scatter(X[:50, 0], X[:50, 1])\n",
    "#test_data[test_data['class_name'] == 'iris-virginia'].plot.scatter('sepal_width', 'sepal_length')\n",
    "\n",
    "plt.scatter(X[:50, 0], X[:50, 1], color='red', marker='o', label='setosa')\n",
    "plt.scatter(X[50:, 0], X[50:, 1], color='blue', marker='x', label='versicolor')\n",
    "plt.xlabel('sepal length [cm]')\n",
    "plt.ylabel('petal length [cm]')\n",
    "plt.legend(loc='upper left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a18286ba8>"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# another way to generate more natively\n",
    "import seaborn as sns\n",
    "sns.scatterplot(df.iloc[:50,].sepal_length, df.iloc[:50,].petal_length, label='setosa')\n",
    "sns.scatterplot(df.iloc[50:100,].sepal_length, df.iloc[50:100,].petal_length, label='versicolor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<__main__.Perceptron at 0x1a1a4bf0b8>"
      ]
     },
     "execution_count": 374,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add shuffle\n",
    "limited_df = df.iloc[:100,].sample(frac=1)\n",
    "y = np.where(limited_df.iloc[:, 4] == 'Iris-setosa', -1, 1) \n",
    "X = limited_df.iloc[:, [0,2]].values\n",
    "\n",
    "ppn = Perceptron(eta=0.1)\n",
    "ppn.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "metadata": {},
   "outputs": [],
   "source": [
    "errors = ppn.errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'errors')"
      ]
     },
     "execution_count": 376,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(range(1, 11), errors, marker='o', color='red', size=100)\n",
    "plt.xlabel('iters')\n",
    "plt.ylabel('errors')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "\n",
    "def plot_decision_regions(X, y, classifier, resolution = 0.02):\n",
    "    markers = ('s', 'x', 'o', '^', 'v')\n",
    "    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n",
    "    cmap = ListedColormap(colors[:len(np.unique(y))]) # num of unique classes\n",
    "    \n",
    "    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1 # min & max value of att1\n",
    "    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1 # min & max value of att2\n",
    "    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n",
    "                     np.arange(x2_min, x2_max, resolution))  # np.arrange generates array with evenly space intervals np.arange(min, max, interval)\n",
    "    dots = np.array([xx1.ravel(), xx2.ravel()]).T # Note: ravel does not copy the values, thus update will alter the origial matrix, but its performace is better than flatten\n",
    "    # with meshgrid, ravel and transforms, coords of a rectangular set of dots are generated\n",
    "\n",
    "    Z = classifier.predict(dots) # mark each dot as 1 or -1 depending on the prediction\n",
    "    Z = Z.reshape(xx1.shape) # since the dots array are flattened, this reshapes it make to a matrix of dots\n",
    "    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)\n",
    "    plt.xlim(xx1.min(), xx1.max())\n",
    "    plt.ylim(xx2.min(), xx2.max())\n",
    "    \n",
    "    # plot class samples\n",
    "    for idx, cl in enumerate(np.unique(y)):\n",
    "        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],\n",
    "                    alpha=0.8, c=cmap(idx),\n",
    "                    marker=markers[idx], label=cl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_decision_regions(X, y, classifier=ppn)\n",
    "plt.xlabel('sepal length [cm]')\n",
    "plt.ylabel('petal length [cm]')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-388-d3b1bab98eba>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-388-d3b1bab98eba>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    self..eta = eta\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "class AdalineGD(object):\n",
    "    def __init__(self, eta=0.01, n_iter=50):\n",
    "        self.eta = eta\n",
    "        self.n_iter = n_iter\n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        n_rows, n_factors = X.shape\n",
    "        self.weights = np.zeros(n_factors + 1)\n",
    "        self.costs = [] # keep track of cost per iter\n",
    "        \n",
    "        for i in range(self.n_iter):\n",
    "            output = self.net_input(X) # all_predictions\n",
    "            errors = y - output\n",
    "            # instead of looping through each row, update weight with result of all rows\n",
    "            self.weights[1:] += self.eta * X.T.dot(errors) \n",
    "            self.weights[0] += self.eta * errors.sum()\n",
    "            cost = (errors ** 2).sum() / 2.0 # cost fuction: sum of square means / 2\n",
    "            self.costs.append(cost)\n",
    "        return self\n",
    "    \n",
    "    # return 1 or -1\n",
    "    def predict(self, X):\n",
    "        return np.where(self.activation(X) >= 0, 1, -1) # syntax: np.where(cond, value_when_true, value_when_false) => array; if net > 0, assign positive class\n",
    "    \n",
    "    def activation(self, X):\n",
    "        return self.net_input(X)\n",
    "    \n",
    "    # returns a float value\n",
    "    def net_input(self, X):\n",
    "        return np.dot(X, self.weights[1:]) + self.weights[0] # dot product plus constant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
